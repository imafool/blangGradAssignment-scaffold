package matchings

import matchings.Permutation

model PermutedClustering {
  param Integer nGroups
  param Integer groupSize
  random List<RealVar> means ?: latentRealList(groupSize)
  random List<RealVar> variances ?: latentRealList(groupSize)
  random List<Permutation> permutations ?: {
    val result = new ArrayList
    for (group : 0 ..< nGroups) 
      result.add(new Permutation(groupSize))
    return result
  }
  random Matrix observations ?: latentMatrix(nGroups, groupSize)
   
  
  laws {
    // Fill this. 
    variances.get(0) ~ Exponential(10.0)
    means.get(0) ~ ContinuousUniform(0.0, 1.0)
    
    for (Integer i: 1 ..< groupSize) {
    	means.get(i) | RealVar previous = means.get(i-1) ~ ContinuousUniform(previous, previous + 1)
	variances.get(i) ~ Exponential(10.0)
    }
 	
    for (Integer i: 0 ..< nGroups) {
    	permutations.get(i) ~ UniformPermutation
    	for (Integer j: 0 ..< groupSize) {
    		observations.getRealVar(i,j) | Permutation perm = permutations.get(i), means, variances, j ~ Normal(
    			means.get(perm.getConnections.get(j)),
    			variances.get(perm.getConnections.get(j))
    		)
		}
	}
  }
     	 	  
  
}