binMean <- array()
while (i <= nBins){
binSum <- sum(sampleExample[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
# Calculations for sigma^2
sampleExample <- rnorm(10000)
N <- length(sampleExample)
sampleMean <- sum(sampleExample)/N
sampleVar <- sum((sampleExample-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(sampleExample[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
# Import csv
permData <- read.csv("permutations.csv")
x = matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(data)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(data[(i-1)*5+j, 'value']) == 1){
x[i] = 1
}
}
}
# Calculations for sigma^2
sampleExample <- rnorm(10000)
N <- length(sampleExample)
sampleMean <- sum(sampleExample)/N
sampleVar <- sum((sampleExample-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(sampleExample[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(data)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(data[(i-1)*5+j, 'value']) == 1){
x[i] <- 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
permData
x
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(data)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(data[(i-1)*5+j, 'value']) == 2){
x[i] <- 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
length(x)
x
sum(x)
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(data)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(data[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
sum(x)
sum(x)
x
x[i] = 1
sum(x)
x
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
hey <- TRUE
for (i in 1:as.integer(dim(data)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(data[(i-1)*5+j, 'value']) == 2){
x[i] = 1
hey <- FALSE
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
hey
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
hey <- TRUE
for (i in 1:as.integer(dim(data)[1]/5)){
for (j in 1:5){
hey <- FALSE
if (j == 1 && as.integer(data[(i-1)*5+j, 'value']) == 2){
x[i] = 1
hey <- FALSE
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
hey
dim(data)
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
hey <- TRUE
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
hey <- FALSE
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
hey <- FALSE
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
x
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
compEff <- [1,2,3]
compEff <- c(1,2,3)
c
compEff
length(x)
length(x)/5
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
getwd()
setwd(/home/kevin/Blang/blangGradAssignment-scaffold)
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
setwd("/home/kevin/Blang/blangGradAssignment-scaffold")
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
setwd("/home/kevin/Blang/blangGradAssignment-scaffold")
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
setwd("/home/kevin/Blang/blangGradAssignment-scaffold")
# Import csv
permData <- read.csv("permutations.csv")
x <- matrix(0,dim(permData)[1],5)
for (i in 1:as.integer(dim(permData)[1]/5)){
for (j in 1:5){
if (j == 1 && as.integer(permData[(i-1)*5+j, 'value']) == 2){
x[i] = 1
}
}
}
# Calculations for sigma^2
N <- length(x)
sampleMean <- sum(x)/N
sampleVar <- sum((x-sampleMean)^2) / (N-1)
# Calculations for Var(mu)
binSize <- floor(sqrt(N))
nBins <- floor(sqrt(N))
i <- 1
binMean <- array()
while (i <= nBins){
binSum <- sum(x[(1+(i-1)*binSize):(i*binSize)])
binMean[i] <- binSum/binSize
i <- i + 1
}
meanMean <- sum(binMean)/nBins
varMean <- sum((binMean - meanMean)^2) / (binSize - 1)
# ESS
ess <- binSize * sampleVar / varMean
